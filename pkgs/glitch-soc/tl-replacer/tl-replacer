#!/usr/bin/ruby
require 'json'
require 'yaml'
require 'pp'

config = YAML.load_file(ARGV[0])
def update_translations(hash, replacements)
    hash.reduce({}) do |acc, (key,value)|
        if value.is_a?(Hash)
            acc[key] = update_translations(value, replacements)
        elsif value.is_a?(String)
            replacements.to_a.sort_by do |x| 0-x[0].length end.each do |from, to|
                if value.match?(from) then
                    puts "updating #{key} from #{value} with #{to}"
                    value.gsub!(from, to)
                end
            end
            acc[key] = value
        end
        acc
    end
end

config["paths"].each do |dir|
    yaml = []
    Dir.entries(dir).each do |fname|
        config["types"]["yaml"].each do |type_ext|
            yaml += [File.join(dir, fname)] if File.extname(fname) == type_ext
        end
    end

    json = []
    Dir.entries(dir).each do |fname|
        config["types"]["json"].each do |type_ext|
            json += [File.join(dir, fname)] if File.extname(fname) == type_ext
        end
    end

    config["replacements"].each do |lang, conf|
        yaml_files = []
        json_files = []

        yaml.each do |fname|
            conf["filename-patterns"].each do |pattern|
                yaml_files += [fname] if File.fnmatch?(pattern, fname)
            end
        end

        yaml_files.each do |fname|
            puts "modifying #{fname}"
            tl = YAML.load_file(fname)
            tl = update_translations(tl, conf["strings"])

            File.open(fname, 'w') do |file|
                file.write(tl.to_yaml(options = {:line_width => -1}))
            end
        end

        json.each do |fname|
            conf["filename-patterns"].each do |pattern|
                json_files += [fname] if File.fnmatch?(pattern, fname)
            end
        end

        json_files.each do |fname|
            puts "modifying #{fname}"
            tl = JSON.load_file(fname)
            tl = update_translations(tl, conf["strings"])

            File.open(fname, 'w') do |file|
                file.write(JSON.pretty_generate(tl))
            end
        end
    end
end
